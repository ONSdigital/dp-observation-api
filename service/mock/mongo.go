// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-observation-api/models"
	"github.com/ONSdigital/dp-observation-api/service"
	"github.com/globalsign/mgo"
	"sync"
)

var (
	lockIMongoMockCheckEditionExists sync.RWMutex
	lockIMongoMockChecker            sync.RWMutex
	lockIMongoMockClose              sync.RWMutex
	lockIMongoMockGetDataset         sync.RWMutex
	lockIMongoMockGetVersion         sync.RWMutex
	lockIMongoMockSession            sync.RWMutex
)

// Ensure, that IMongoMock does implement service.IMongo.
// If this is not the case, regenerate this file with moq.
var _ service.IMongo = &IMongoMock{}

// IMongoMock is a mock implementation of service.IMongo.
//
//     func TestSomethingThatUsesIMongo(t *testing.T) {
//
//         // make and configure a mocked service.IMongo
//         mockedIMongo := &IMongoMock{
//             CheckEditionExistsFunc: func(ID string, editionID string, state string) error {
// 	               panic("mock out the CheckEditionExists method")
//             },
//             CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
// 	               panic("mock out the Checker method")
//             },
//             CloseFunc: func(ctx context.Context) error {
// 	               panic("mock out the Close method")
//             },
//             GetDatasetFunc: func(ID string) (*models.DatasetUpdate, error) {
// 	               panic("mock out the GetDataset method")
//             },
//             GetVersionFunc: func(datasetID string, editionID string, version string, state string) (*models.Version, error) {
// 	               panic("mock out the GetVersion method")
//             },
//             SessionFunc: func() *mgo.Session {
// 	               panic("mock out the Session method")
//             },
//         }
//
//         // use mockedIMongo in code that requires service.IMongo
//         // and then make assertions.
//
//     }
type IMongoMock struct {
	// CheckEditionExistsFunc mocks the CheckEditionExists method.
	CheckEditionExistsFunc func(ID string, editionID string, state string) error

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// GetDatasetFunc mocks the GetDataset method.
	GetDatasetFunc func(ID string) (*models.DatasetUpdate, error)

	// GetVersionFunc mocks the GetVersion method.
	GetVersionFunc func(datasetID string, editionID string, version string, state string) (*models.Version, error)

	// SessionFunc mocks the Session method.
	SessionFunc func() *mgo.Session

	// calls tracks calls to the methods.
	calls struct {
		// CheckEditionExists holds details about calls to the CheckEditionExists method.
		CheckEditionExists []struct {
			// ID is the ID argument value.
			ID string
			// EditionID is the editionID argument value.
			EditionID string
			// State is the state argument value.
			State string
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetDataset holds details about calls to the GetDataset method.
		GetDataset []struct {
			// ID is the ID argument value.
			ID string
		}
		// GetVersion holds details about calls to the GetVersion method.
		GetVersion []struct {
			// DatasetID is the datasetID argument value.
			DatasetID string
			// EditionID is the editionID argument value.
			EditionID string
			// Version is the version argument value.
			Version string
			// State is the state argument value.
			State string
		}
		// Session holds details about calls to the Session method.
		Session []struct {
		}
	}
}

// CheckEditionExists calls CheckEditionExistsFunc.
func (mock *IMongoMock) CheckEditionExists(ID string, editionID string, state string) error {
	if mock.CheckEditionExistsFunc == nil {
		panic("IMongoMock.CheckEditionExistsFunc: method is nil but IMongo.CheckEditionExists was just called")
	}
	callInfo := struct {
		ID        string
		EditionID string
		State     string
	}{
		ID:        ID,
		EditionID: editionID,
		State:     state,
	}
	lockIMongoMockCheckEditionExists.Lock()
	mock.calls.CheckEditionExists = append(mock.calls.CheckEditionExists, callInfo)
	lockIMongoMockCheckEditionExists.Unlock()
	return mock.CheckEditionExistsFunc(ID, editionID, state)
}

// CheckEditionExistsCalls gets all the calls that were made to CheckEditionExists.
// Check the length with:
//     len(mockedIMongo.CheckEditionExistsCalls())
func (mock *IMongoMock) CheckEditionExistsCalls() []struct {
	ID        string
	EditionID string
	State     string
} {
	var calls []struct {
		ID        string
		EditionID string
		State     string
	}
	lockIMongoMockCheckEditionExists.RLock()
	calls = mock.calls.CheckEditionExists
	lockIMongoMockCheckEditionExists.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *IMongoMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("IMongoMock.CheckerFunc: method is nil but IMongo.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	lockIMongoMockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	lockIMongoMockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedIMongo.CheckerCalls())
func (mock *IMongoMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	lockIMongoMockChecker.RLock()
	calls = mock.calls.Checker
	lockIMongoMockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *IMongoMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("IMongoMock.CloseFunc: method is nil but IMongo.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockIMongoMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockIMongoMockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedIMongo.CloseCalls())
func (mock *IMongoMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockIMongoMockClose.RLock()
	calls = mock.calls.Close
	lockIMongoMockClose.RUnlock()
	return calls
}

// GetDataset calls GetDatasetFunc.
func (mock *IMongoMock) GetDataset(ID string) (*models.DatasetUpdate, error) {
	if mock.GetDatasetFunc == nil {
		panic("IMongoMock.GetDatasetFunc: method is nil but IMongo.GetDataset was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: ID,
	}
	lockIMongoMockGetDataset.Lock()
	mock.calls.GetDataset = append(mock.calls.GetDataset, callInfo)
	lockIMongoMockGetDataset.Unlock()
	return mock.GetDatasetFunc(ID)
}

// GetDatasetCalls gets all the calls that were made to GetDataset.
// Check the length with:
//     len(mockedIMongo.GetDatasetCalls())
func (mock *IMongoMock) GetDatasetCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockIMongoMockGetDataset.RLock()
	calls = mock.calls.GetDataset
	lockIMongoMockGetDataset.RUnlock()
	return calls
}

// GetVersion calls GetVersionFunc.
func (mock *IMongoMock) GetVersion(datasetID string, editionID string, version string, state string) (*models.Version, error) {
	if mock.GetVersionFunc == nil {
		panic("IMongoMock.GetVersionFunc: method is nil but IMongo.GetVersion was just called")
	}
	callInfo := struct {
		DatasetID string
		EditionID string
		Version   string
		State     string
	}{
		DatasetID: datasetID,
		EditionID: editionID,
		Version:   version,
		State:     state,
	}
	lockIMongoMockGetVersion.Lock()
	mock.calls.GetVersion = append(mock.calls.GetVersion, callInfo)
	lockIMongoMockGetVersion.Unlock()
	return mock.GetVersionFunc(datasetID, editionID, version, state)
}

// GetVersionCalls gets all the calls that were made to GetVersion.
// Check the length with:
//     len(mockedIMongo.GetVersionCalls())
func (mock *IMongoMock) GetVersionCalls() []struct {
	DatasetID string
	EditionID string
	Version   string
	State     string
} {
	var calls []struct {
		DatasetID string
		EditionID string
		Version   string
		State     string
	}
	lockIMongoMockGetVersion.RLock()
	calls = mock.calls.GetVersion
	lockIMongoMockGetVersion.RUnlock()
	return calls
}

// Session calls SessionFunc.
func (mock *IMongoMock) Session() *mgo.Session {
	if mock.SessionFunc == nil {
		panic("IMongoMock.SessionFunc: method is nil but IMongo.Session was just called")
	}
	callInfo := struct {
	}{}
	lockIMongoMockSession.Lock()
	mock.calls.Session = append(mock.calls.Session, callInfo)
	lockIMongoMockSession.Unlock()
	return mock.SessionFunc()
}

// SessionCalls gets all the calls that were made to Session.
// Check the length with:
//     len(mockedIMongo.SessionCalls())
func (mock *IMongoMock) SessionCalls() []struct {
} {
	var calls []struct {
	}
	lockIMongoMockSession.RLock()
	calls = mock.calls.Session
	lockIMongoMockSession.RUnlock()
	return calls
}
