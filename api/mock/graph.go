// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-graph/v2/observation"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/ONSdigital/dp-observation-api/api"
	"sync"
)

// Ensure, that IGraphMock does implement api.IGraph.
// If this is not the case, regenerate this file with moq.
var _ api.IGraph = &IGraphMock{}

// IGraphMock is a mock implementation of api.IGraph.
//
// 	func TestSomethingThatUsesIGraph(t *testing.T) {
//
// 		// make and configure a mocked api.IGraph
// 		mockedIGraph := &IGraphMock{
// 			CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			CloseFunc: func(ctx context.Context) error {
// 				panic("mock out the Close method")
// 			},
// 			ErrorChanFunc: func() chan error {
// 				panic("mock out the ErrorChan method")
// 			},
// 			HealthcheckFunc: func() (string, error) {
// 				panic("mock out the Healthcheck method")
// 			},
// 			StreamCSVRowsFunc: func(ctx context.Context, instanceID string, filterID string, filters *observation.DimensionFilters, limit *int) (observation.StreamRowReader, error) {
// 				panic("mock out the StreamCSVRows method")
// 			},
// 		}
//
// 		// use mockedIGraph in code that requires api.IGraph
// 		// and then make assertions.
//
// 	}
type IGraphMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// CloseFunc mocks the Close method.
	CloseFunc func(ctx context.Context) error

	// ErrorChanFunc mocks the ErrorChan method.
	ErrorChanFunc func() chan error

	// HealthcheckFunc mocks the Healthcheck method.
	HealthcheckFunc func() (string, error)

	// StreamCSVRowsFunc mocks the StreamCSVRows method.
	StreamCSVRowsFunc func(ctx context.Context, instanceID string, filterID string, filters *observation.DimensionFilters, limit *int) (observation.StreamRowReader, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Close holds details about calls to the Close method.
		Close []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ErrorChan holds details about calls to the ErrorChan method.
		ErrorChan []struct {
		}
		// Healthcheck holds details about calls to the Healthcheck method.
		Healthcheck []struct {
		}
		// StreamCSVRows holds details about calls to the StreamCSVRows method.
		StreamCSVRows []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// FilterID is the filterID argument value.
			FilterID string
			// Filters is the filters argument value.
			Filters *observation.DimensionFilters
			// Limit is the limit argument value.
			Limit *int
		}
	}
	lockChecker       sync.RWMutex
	lockClose         sync.RWMutex
	lockErrorChan     sync.RWMutex
	lockHealthcheck   sync.RWMutex
	lockStreamCSVRows sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *IGraphMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("IGraphMock.CheckerFunc: method is nil but IGraph.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedIGraph.CheckerCalls())
func (mock *IGraphMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Close calls CloseFunc.
func (mock *IGraphMock) Close(ctx context.Context) error {
	if mock.CloseFunc == nil {
		panic("IGraphMock.CloseFunc: method is nil but IGraph.Close was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc(ctx)
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedIGraph.CloseCalls())
func (mock *IGraphMock) CloseCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// ErrorChan calls ErrorChanFunc.
func (mock *IGraphMock) ErrorChan() chan error {
	if mock.ErrorChanFunc == nil {
		panic("IGraphMock.ErrorChanFunc: method is nil but IGraph.ErrorChan was just called")
	}
	callInfo := struct {
	}{}
	mock.lockErrorChan.Lock()
	mock.calls.ErrorChan = append(mock.calls.ErrorChan, callInfo)
	mock.lockErrorChan.Unlock()
	return mock.ErrorChanFunc()
}

// ErrorChanCalls gets all the calls that were made to ErrorChan.
// Check the length with:
//     len(mockedIGraph.ErrorChanCalls())
func (mock *IGraphMock) ErrorChanCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockErrorChan.RLock()
	calls = mock.calls.ErrorChan
	mock.lockErrorChan.RUnlock()
	return calls
}

// Healthcheck calls HealthcheckFunc.
func (mock *IGraphMock) Healthcheck() (string, error) {
	if mock.HealthcheckFunc == nil {
		panic("IGraphMock.HealthcheckFunc: method is nil but IGraph.Healthcheck was just called")
	}
	callInfo := struct {
	}{}
	mock.lockHealthcheck.Lock()
	mock.calls.Healthcheck = append(mock.calls.Healthcheck, callInfo)
	mock.lockHealthcheck.Unlock()
	return mock.HealthcheckFunc()
}

// HealthcheckCalls gets all the calls that were made to Healthcheck.
// Check the length with:
//     len(mockedIGraph.HealthcheckCalls())
func (mock *IGraphMock) HealthcheckCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockHealthcheck.RLock()
	calls = mock.calls.Healthcheck
	mock.lockHealthcheck.RUnlock()
	return calls
}

// StreamCSVRows calls StreamCSVRowsFunc.
func (mock *IGraphMock) StreamCSVRows(ctx context.Context, instanceID string, filterID string, filters *observation.DimensionFilters, limit *int) (observation.StreamRowReader, error) {
	if mock.StreamCSVRowsFunc == nil {
		panic("IGraphMock.StreamCSVRowsFunc: method is nil but IGraph.StreamCSVRows was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		FilterID   string
		Filters    *observation.DimensionFilters
		Limit      *int
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		FilterID:   filterID,
		Filters:    filters,
		Limit:      limit,
	}
	mock.lockStreamCSVRows.Lock()
	mock.calls.StreamCSVRows = append(mock.calls.StreamCSVRows, callInfo)
	mock.lockStreamCSVRows.Unlock()
	return mock.StreamCSVRowsFunc(ctx, instanceID, filterID, filters, limit)
}

// StreamCSVRowsCalls gets all the calls that were made to StreamCSVRows.
// Check the length with:
//     len(mockedIGraph.StreamCSVRowsCalls())
func (mock *IGraphMock) StreamCSVRowsCalls() []struct {
	Ctx        context.Context
	InstanceID string
	FilterID   string
	Filters    *observation.DimensionFilters
	Limit      *int
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		FilterID   string
		Filters    *observation.DimensionFilters
		Limit      *int
	}
	mock.lockStreamCSVRows.RLock()
	calls = mock.calls.StreamCSVRows
	mock.lockStreamCSVRows.RUnlock()
	return calls
}
